// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.EF;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240614085445_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdminRolesSysAdmin", b =>
                {
                    b.Property<string>("AdminsEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RolesRoleId")
                        .HasColumnType("int");

                    b.HasKey("AdminsEmployeeId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("AdminRolesSysAdmin");
                });

            modelBuilder.Entity("WebAPI.Schema.AdminRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("AdminRoles");
                });

            modelBuilder.Entity("WebAPI.Schema.Appointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AppointmentCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SessionId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("WebAPI.Schema.Bill", b =>
                {
                    b.Property<string>("BillId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BillCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("BillIssuedByEmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BillValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentInvoiceInvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillId");

                    b.HasIndex("BillIssuedByEmployeeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentInvoiceInvoiceId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("WebAPI.Schema.Credentials", b =>
                {
                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("WebAPI.Schema.DiagnosticRequest", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiagnosticTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalReportReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedDoctorEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestId");

                    b.HasIndex("DiagnosticTypeId");

                    b.HasIndex("MedicalReportReportId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RequestedDoctorEmployeeId");

                    b.ToTable("DiagnosticRequests");
                });

            modelBuilder.Entity("WebAPI.Schema.DiagnosticTypes", b =>
                {
                    b.Property<string>("DiagnosticTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiagnosticTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosticTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerDiagnosys")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DiagnosticTypeId");

                    b.ToTable("DiagnosticTypes");
                });

            modelBuilder.Entity("WebAPI.Schema.EmployeeBase", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmployeeCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Gender1");

                    b.ToTable("EmployeeBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EmployeeBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebAPI.Schema.Genders", b =>
                {
                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Gender");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("WebAPI.Schema.MedicalReport", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuerEmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("IssuerEmployeeId");

                    b.ToTable("MedicalReports");
                });

            modelBuilder.Entity("WebAPI.Schema.Medicine", b =>
                {
                    b.Property<string>("MedicineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineType1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitOfMeasurementMeasurementUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MedicineId");

                    b.HasIndex("MedicineType1");

                    b.HasIndex("UnitOfMeasurementMeasurementUnit");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("WebAPI.Schema.MedicineTypes", b =>
                {
                    b.Property<string>("MedicineType")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MedicineType");

                    b.ToTable("MedicineTypes");
                });

            modelBuilder.Entity("WebAPI.Schema.PatientBase", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("DoctorNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PatientCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("Gender1");

                    b.ToTable("PatientBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PatientBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebAPI.Schema.PaymentInvoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceIssuerEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaidPatientPatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentModePaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("InvoiceIssuerEmployeeId");

                    b.HasIndex("PaidPatientPatientId");

                    b.HasIndex("PaymentModePaymentMethod");

                    b.ToTable("PaymentInvoices");
                });

            modelBuilder.Entity("WebAPI.Schema.PaymentMethods", b =>
                {
                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentMethod");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("WebAPI.Schema.PrescribedMedicine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicineId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrescriptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Units")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitsPerDay")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescribedMedicines");
                });

            modelBuilder.Entity("WebAPI.Schema.Prescription", b =>
                {
                    b.Property<string>("PrescriptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IssuedDoctorEmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuedPharmacistEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("IssuedDoctorEmployeeId");

                    b.HasIndex("IssuedPharmacistEmployeeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("WebAPI.Schema.Query", b =>
                {
                    b.Property<string>("QueryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RepliedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QueryId");

                    b.HasIndex("SenderPatientId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("WebAPI.Schema.Rooms", b =>
                {
                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Room");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("WebAPI.Schema.Sessions", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorEmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PricePerVisit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Room1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SessionCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionDurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionId");

                    b.HasIndex("DoctorEmployeeId");

                    b.HasIndex("Room1");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("WebAPI.Schema.UnitsOfMedicineMeasurement", b =>
                {
                    b.Property<string>("MeasurementUnit")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MeasurementUnit");

                    b.ToTable("UnitsOfMedicines");
                });

            modelBuilder.Entity("WebAPI.Schema.BillIssuer", b =>
                {
                    b.HasBaseType("WebAPI.Schema.EmployeeBase");

                    b.HasDiscriminator().HasValue("BillIssuer");
                });

            modelBuilder.Entity("WebAPI.Schema.Doctor", b =>
                {
                    b.HasBaseType("WebAPI.Schema.EmployeeBase");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("WebAPI.Schema.InvoiceIssuer", b =>
                {
                    b.HasBaseType("WebAPI.Schema.EmployeeBase");

                    b.HasDiscriminator().HasValue("InvoiceIssuer");
                });

            modelBuilder.Entity("WebAPI.Schema.SysAdmin", b =>
                {
                    b.HasBaseType("WebAPI.Schema.EmployeeBase");

                    b.HasDiscriminator().HasValue("SysAdmin");
                });

            modelBuilder.Entity("WebAPI.Schema.DependentPatient", b =>
                {
                    b.HasBaseType("WebAPI.Schema.PatientBase");

                    b.Property<string>("IndependentPatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("IndependentPatientId");

                    b.HasDiscriminator().HasValue("DependentPatient");
                });

            modelBuilder.Entity("WebAPI.Schema.IndependentPatient", b =>
                {
                    b.HasBaseType("WebAPI.Schema.PatientBase");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("IndependentPatient");
                });

            modelBuilder.Entity("WebAPI.Schema.LabWorker", b =>
                {
                    b.HasBaseType("WebAPI.Schema.BillIssuer");

                    b.HasDiscriminator().HasValue("LabWorker");
                });

            modelBuilder.Entity("WebAPI.Schema.Pharmacist", b =>
                {
                    b.HasBaseType("WebAPI.Schema.BillIssuer");

                    b.HasDiscriminator().HasValue("Pharmacist");
                });

            modelBuilder.Entity("WebAPI.Schema.CounterReceptionist", b =>
                {
                    b.HasBaseType("WebAPI.Schema.InvoiceIssuer");

                    b.HasDiscriminator().HasValue("CounterReceptionist");
                });

            modelBuilder.Entity("AdminRolesSysAdmin", b =>
                {
                    b.HasOne("WebAPI.Schema.SysAdmin", null)
                        .WithMany()
                        .HasForeignKey("AdminsEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Schema.AdminRoles", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Schema.Appointment", b =>
                {
                    b.HasOne("WebAPI.Schema.PatientBase", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Schema.Sessions", "Session")
                        .WithMany("Appointments")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WebAPI.Schema.Bill", b =>
                {
                    b.HasOne("WebAPI.Schema.BillIssuer", "BillIssuedBy")
                        .WithMany("IssuedBills")
                        .HasForeignKey("BillIssuedByEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Schema.PatientBase", "Patient")
                        .WithMany("Bills")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Schema.PaymentInvoice", "PaymentInvoice")
                        .WithMany("Bills")
                        .HasForeignKey("PaymentInvoiceInvoiceId");

                    b.Navigation("BillIssuedBy");

                    b.Navigation("Patient");

                    b.Navigation("PaymentInvoice");
                });

            modelBuilder.Entity("WebAPI.Schema.Credentials", b =>
                {
                    b.HasOne("WebAPI.Schema.EmployeeBase", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Schema.IndependentPatient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("WebAPI.Schema.DiagnosticRequest", b =>
                {
                    b.HasOne("WebAPI.Schema.DiagnosticTypes", "DiagnosticType")
                        .WithMany("DiagnosticRequests")
                        .HasForeignKey("DiagnosticTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Schema.MedicalReport", "MedicalReport")
                        .WithMany()
                        .HasForeignKey("MedicalReportReportId");

                    b.HasOne("WebAPI.Schema.PatientBase", "Patient")
                        .WithMany("DiagnosticRequests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Schema.Doctor", "RequestedDoctor")
                        .WithMany("DiagnosticRequests")
                        .HasForeignKey("RequestedDoctorEmployeeId");

                    b.Navigation("DiagnosticType");

                    b.Navigation("MedicalReport");

                    b.Navigation("Patient");

                    b.Navigation("RequestedDoctor");
                });

            modelBuilder.Entity("WebAPI.Schema.EmployeeBase", b =>
                {
                    b.HasOne("WebAPI.Schema.Genders", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("Gender1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("WebAPI.Schema.MedicalReport", b =>
                {
                    b.HasOne("WebAPI.Schema.LabWorker", "Issuer")
                        .WithMany("IssuedMedicalReports")
                        .HasForeignKey("IssuerEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("WebAPI.Schema.Medicine", b =>
                {
                    b.HasOne("WebAPI.Schema.MedicineTypes", "MedicineType")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicineType1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Schema.UnitsOfMedicineMeasurement", "UnitOfMeasurement")
                        .WithMany("Medicines")
                        .HasForeignKey("UnitOfMeasurementMeasurementUnit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineType");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("WebAPI.Schema.PatientBase", b =>
                {
                    b.HasOne("WebAPI.Schema.Genders", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("Gender1");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("WebAPI.Schema.PaymentInvoice", b =>
                {
                    b.HasOne("WebAPI.Schema.InvoiceIssuer", "InvoiceIssuer")
                        .WithMany("IssuedInvoices")
                        .HasForeignKey("InvoiceIssuerEmployeeId");

                    b.HasOne("WebAPI.Schema.PatientBase", "PaidPatient")
                        .WithMany("Invoices")
                        .HasForeignKey("PaidPatientPatientId");

                    b.HasOne("WebAPI.Schema.PaymentMethods", "PaymentMode")
                        .WithMany("PaymentInvoices")
                        .HasForeignKey("PaymentModePaymentMethod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceIssuer");

                    b.Navigation("PaidPatient");

                    b.Navigation("PaymentMode");
                });

            modelBuilder.Entity("WebAPI.Schema.PrescribedMedicine", b =>
                {
                    b.HasOne("WebAPI.Schema.Medicine", "Medicine")
                        .WithMany("Prescribings")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Schema.Prescription", "Prescription")
                        .WithMany("PrescribedMedicine")
                        .HasForeignKey("PrescriptionId");

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("WebAPI.Schema.Prescription", b =>
                {
                    b.HasOne("WebAPI.Schema.Doctor", "IssuedDoctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IssuedDoctorEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Schema.Pharmacist", "IssuedPharmacist")
                        .WithMany("IssuedPrescriptions")
                        .HasForeignKey("IssuedPharmacistEmployeeId");

                    b.HasOne("WebAPI.Schema.PatientBase", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId");

                    b.Navigation("IssuedDoctor");

                    b.Navigation("IssuedPharmacist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("WebAPI.Schema.Query", b =>
                {
                    b.HasOne("WebAPI.Schema.IndependentPatient", "Sender")
                        .WithMany("Queries")
                        .HasForeignKey("SenderPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WebAPI.Schema.Sessions", b =>
                {
                    b.HasOne("WebAPI.Schema.Doctor", "Doctor")
                        .WithMany("Sessions")
                        .HasForeignKey("DoctorEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Schema.Rooms", "Room")
                        .WithMany("Sessions")
                        .HasForeignKey("Room1");

                    b.Navigation("Doctor");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WebAPI.Schema.DependentPatient", b =>
                {
                    b.HasOne("WebAPI.Schema.IndependentPatient", "IndependentPatient")
                        .WithMany("DependentPatients")
                        .HasForeignKey("IndependentPatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("IndependentPatient");
                });

            modelBuilder.Entity("WebAPI.Schema.DiagnosticTypes", b =>
                {
                    b.Navigation("DiagnosticRequests");
                });

            modelBuilder.Entity("WebAPI.Schema.Genders", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("WebAPI.Schema.Medicine", b =>
                {
                    b.Navigation("Prescribings");
                });

            modelBuilder.Entity("WebAPI.Schema.MedicineTypes", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("WebAPI.Schema.PatientBase", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Bills");

                    b.Navigation("DiagnosticRequests");

                    b.Navigation("Invoices");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("WebAPI.Schema.PaymentInvoice", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("WebAPI.Schema.PaymentMethods", b =>
                {
                    b.Navigation("PaymentInvoices");
                });

            modelBuilder.Entity("WebAPI.Schema.Prescription", b =>
                {
                    b.Navigation("PrescribedMedicine");
                });

            modelBuilder.Entity("WebAPI.Schema.Rooms", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebAPI.Schema.Sessions", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("WebAPI.Schema.UnitsOfMedicineMeasurement", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("WebAPI.Schema.BillIssuer", b =>
                {
                    b.Navigation("IssuedBills");
                });

            modelBuilder.Entity("WebAPI.Schema.Doctor", b =>
                {
                    b.Navigation("DiagnosticRequests");

                    b.Navigation("Prescriptions");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebAPI.Schema.InvoiceIssuer", b =>
                {
                    b.Navigation("IssuedInvoices");
                });

            modelBuilder.Entity("WebAPI.Schema.IndependentPatient", b =>
                {
                    b.Navigation("DependentPatients");

                    b.Navigation("Queries");
                });

            modelBuilder.Entity("WebAPI.Schema.LabWorker", b =>
                {
                    b.Navigation("IssuedMedicalReports");
                });

            modelBuilder.Entity("WebAPI.Schema.Pharmacist", b =>
                {
                    b.Navigation("IssuedPrescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
